;; ===============================================================
;; EWW CONFIG NAMING GUIDE
;; ===============================================================
;;
;; To keep the config readable and organized, follow a simple
;; naming convention based on element type:
;;
;; 1. Polls (values updated periodically)
;;    Prefix: poll_
;;    Example: poll_brightness, poll_battery
;;
;; 2. Variables (dynamic values updated via scripts or user input)
;;    Prefix: var_
;;    Example: var_volume, var_brightness
;;
;; 3. Booleans (flags that are true/false)
;;    Prefix: is_
;;    Example: is_muted, is_fullscreen
;;
;; 4. Buttons (interactive elements)
;;    Prefix: btn_
;;    Example: btn_toggle_brightness, btn_increase_volume
;;
;; 5. Labels (display-only text elements)
;;    Prefix: lbl_
;;    Example: lbl_brightness, lbl_battery_status
;;
;; Tips:
;; - Use descriptive names: e.g., var_brightness_screen1 > var_b1
;; - Keep prefixes consistent to quickly identify element types
;; - For readability, avoid overly short or ambiguous names
;;
;; ===============================================================

(defpoll clock_h :interval "5m" "date +\%I")
(defpoll clock_m :interval "5s" "date +\%M")
(defpoll am_pm :interval "5s" "date +\%p")
(defpoll poll_volume 
  :interval "24h"
  "eww update v_volume=$(pactl get-sink-volume @DEFAULT_SINK@ | grep -oP '\d+%' | head -n1 | tr -d '%')")

(defvar is_brightness false)
(defvar is_volume false)
(defvar var_brightness 0)
(defvar var_volume 0)

(defwindow bar
  :monitor 0
  :geometry (geometry 
             :height "48px" 
             :width "100%" 
             :anchor "bottom center")
  
  :stacking "bt"
  :exclusive "true"
  (left_widgets))
 
(defwidget left_widgets[]
  (box
    :space-evenly false
    :orientation "h"
    (mode)
    (screen_brightness)
    (volume)
    (battery  :capacity {EWW_BATTERY.BAT0.capacity}
              :status {EWW_BATTERY.BAT0.status})
    (clock)
    (kb_brightness)))


(defwidget mode[]
  (box
    :width "100px"
    :hexpand false
    :class "mode"
    :geometry (geometry
                :width "200px")
    (label
      :text "NORMAL")))
 
(defwidget screen_brightness[]
    (custom_revealer
      :btn_icons "${var_brightness > 40 ? '' : ''}"
      :onclick "eww update is_brightness=${is_brightness == false ? true : false}"
      :is_open is_brightness
      :value var_brightness
      :min 0
      :max 101
      :onchange "~/.config/scripts/eww/helpers/brightness.sh -u {}"))

(defwidget volume[]
  (custom_revealer
    :btn_icons "${var_volume == 0 ? '' : var_volume < 10 ? '' : var_volume < 30 ? '' : ''}"
    :onclick "eww update b_volume=${is_volume == false ? true : false}"
    :is_open is_volume
    :value var_volume
    :min 0
    :max 101
    :onchange "pactl set-sink-volume @DEFAULT_SINK@ {}% && eww update v_volume={}"))

(defwidget battery [capacity status]
  (box
    :class "${status == 'Charging' ? 'battery--charging' : 'battery'}"
    :tooltip "${capacity}% ${status == 'Charging' ? status : ''}"
    (label
      :class "icon ${status == 'Charging' ? 'battery_charging' : 
                      capacity <= 15 ? 'battery_warning' : 'battery'}"
      :text "${status == 'Charging' ? '' : 
                capacity <= 10 ? '' : 
                  capacity <= 25 ? '' : 
                    capacity <= 35 ? '' : 
                      capacity <= 50 ? '' : 
                        capacity <= 75 ? '' : 
                          capacity <= 90 ? '' : ''}")))

(defwidget clock[]
  (box
    (label
      :text "${clock_h}:${clock_m} ${am_pm}")))

(defwidget kb_brightness[]
  (button
    :class "btn-debug"
    :onclick "asusctl -n"
    (label
      :class "icon"
      :text "")))

(defwidget custom_revealer[btn_icons onclick is_open value min max onchange]
  (box
    (button
      :class "btn-debug"
      :onclick onclick
      (label
        :class "icon"
        :text btn_icons))
    (revealer
      :class "slider"
      :transition "slideright"
      :reveal is_open
      :duration "500ms"
      (custom_slider
        :value value
        :min min
        :max max
        :onchange onchange))))

(defwidget custom_slider[value min max onchange]
  (box
    (overlay
      (label 
        :text "${value <= 10 ? '[░░░░░░░░░░]' : 
                   value <= 20 ? '[▓░░░░░░░░░]' : 
                     value <= 30 ? '[▓▓░░░░░░░░]' : 
                       value <= 40 ? '[▓▓▓░░░░░░░]' : 
                         value <= 50 ? '[▓▓▓▓░░░░░░]' : 
                           value <= 60 ? '[▓▓▓▓▓░░░░░]' : 
                             value <= 70 ? '[▓▓▓▓▓▓░░░░]' : 
                               value <= 80 ? '[▓▓▓▓▓▓▓░░░]' : 
                                 value <= 90 ? '[▓▓▓▓▓▓▓▓░░]' : 
                                   value < 100 ? '[▓▓▓▓▓▓▓▓▓░]' : '[▓▓▓▓▓▓▓▓▓▓]'}")
      (scale
        :class "hidden_slider"
        :value value
        :min min
        :max max
        :onchange onchange))))
